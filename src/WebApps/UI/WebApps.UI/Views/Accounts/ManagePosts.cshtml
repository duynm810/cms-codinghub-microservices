@model ManagePostsViewModel
@{
    ViewData["ShowBottom"] = false;
    var posts = Model.Posts;
    var user = User;
    var isAdmin = ClaimsPrincipalExtensions.IsInRole(user, UserRolesConsts.Administrator);
}

@section Scripts {
    <script>
        $(document).on('click', '.pagination a', function (e) {
            e.preventDefault();
            const page = $(this).attr('href').split('page=')[1];
            loadPosts(page);
        });

        // Load first page when filter changes
        $(document).on('change', '#status-filter', function () {
            loadPosts(1); 
        });

        $(document).on('input', '#keyword-filter', function () {
            let keyword = $(this).val().toLowerCase();
            $('#posts-table-body tr').filter(function() {
                $(this).toggle($(this).text().toLowerCase().indexOf(keyword) > -1);
            });
        });
        
        $(document).on('click', '.btn-history', function () {
            viewPostActivityLogs(this);
        });

        function viewPostActivityLogs(button) {
            const postId = button.getAttribute('data-id');
            $.ajax({
                url: '/posts/activity-logs/' + postId,
                type: 'GET',
                success: function (response) {
                    $('#activity-log-modal .modal-body').html(response);
                    $('#activity-log-modal').modal('show');
                },
                error: function (xhr, status, error) {

                }
            });
        }

        function loadPosts(page) {
            let status = $('#status-filter').val();
            if (status === "") {
                status = null; // Treat empty string as null for int status
            }
            
            $.ajax({
                url: '/accounts/posts-by-current-user',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    status: status,
                    pageNumber: page
                }),
                success: function (response) {
                    if (response.success) {
                        $('#posts-table-body').html(response.html); // Update table content
                        $('#pagination-area').html(response.paginationHtml); // Update table content
                    } else {
                        // Handle error
                    }
                },
                error: function (xhr, status, error) {
                    // Handle AJAX error
                }
            });
        }
        
        function updatePost(button) {
            let slug = button.getAttribute('data-slug');
            let urlTemplate = button.getAttribute('data-url');
            window.location.href = urlTemplate.replace('__slug__', encodeURIComponent(slug));
        }

        function deletePost(button) {
            const postId = button.getAttribute('data-id');
            let deleteUrl = `@Url.Action("DeletePost", "Accounts")/${postId}`;

            showConfirmAlert(
                'Are you sure?',
                "You won't be able to revert this!",
                'Yes, delete it!',
                'Cancel',
                () => {
                    $.ajax({
                        url: deleteUrl,
                        type: 'DELETE',
                        contentType: 'application/json',
                        success: function(data) {
                            if (data.success) {
                                showSuccessNotification('Your post has been deleted.');
                                if (data.html) {
                                    $('#posts-table-body').html(data.html); // Update table content
                                }
                            } else {
                                showErrorNotification('There was a problem deleting your post.');
                            }
                        },
                        error: function() {
                            showErrorNotification('There was a problem deleting your post.');
                        }
                    });
                }
            );
        }

        function confirmPin(button, shouldPin) {
            const action = shouldPin ? 'pin' : 'unpin';
            const message = shouldPin ? 'pin this post' : 'unpin this post';
            const currentPage = $(this).attr('href').split('page=')[1];
            
            showConfirmAlert(
                `Confirm ${action}`,
                `Are you sure you want to ${message}?`,
                `Yes, ${action} it`,
                'Cancel',
                () => {
                    const postId = button.getAttribute('data-id');
                    pinPost(postId, shouldPin, currentPage);
                }
            );
        }

        function confirmFeature(button, shouldFeature) {
            const action = shouldFeature ? 'feature' : 'unfeature';
            const message = shouldFeature ? 'feature this post' : 'unfeature this post';
            const currentPage = $(this).attr('href').split('page=')[1];

            showConfirmAlert(
                `Confirm ${action}`,
                `Are you sure you want to ${message}?`,
                `Yes, ${action} it`,
                'Cancel',
                () => {
                    const postId = button.getAttribute('data-id');
                    featurePost(postId, shouldFeature, currentPage);
                }
            );
        }

        function confirmAction(button, action) {
            const actionText = {
                'approve': 'approve this post',
                'reject': 'reject this post',
                'waiting': 'set this post to waiting'
            };

            const actionConfirmText = {
                'approve': 'Approve',
                'reject': 'Reject',
                'waiting': 'Set to Waiting'
            };

            const postId = button.getAttribute('data-id');
            const message = actionText[action];
            const currentPage = document.getElementById('current-page').value;
            console.log(currentPage);

            @*if (action === 'reject') {
                showConfirmWithInput(
                    `Confirm ${action}`,
                    `Are you sure you want to ${message}? Please provide a reason:`,
                    `Yes, ${actionConfirmText[action]} it`,
                    'Cancel',
                    'Reason for rejection...',
                    (inputValue) => {
                        handlePostAction(postId, action, currentPage, inputValue);
                    }
                );
            } else {
                showConfirmAlert(
                    `Confirm ${action}`,
                    `Are you sure you want to ${message}?`,
                    `Yes, ${actionConfirmText[action]} it`,
                    'Cancel',
                    () => {
                        handlePostAction(postId, action, currentPage);
                    }
                );
            }*@
        }

        async function pinPost(postId, shouldPin, currentPage) {
            try {
                console.log(`${shouldPin ? 'Pin' : 'Unpin'} post:`, postId);
                console.log(currentPage);
                const response = await $.ajax({
                    url: `/accounts/toggle-pin-status/${postId}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        isPinned: shouldPin,
                        currentPage: currentPage
                    })
                });

                if (response.success) {
                    $('#posts-table-body').html(response.html); // Update table content
                    showSuccessNotification(`Post ${shouldPin ? 'pinned' : 'unpinned'} successfully.`);
                } else {
                    showErrorNotification(`There was a problem ${shouldPin ? 'pinning' : 'unpinning'} your post.`);
                }
            } catch (error) {
                showErrorNotification(`Error ${shouldPin ? 'pinning' : 'unpinning'} post: ${error.responseText || error.message}`);
            }
        }

        async function featurePost(postId, shouldFeature, currentPage) {
            try {
                console.log(`${shouldFeature ? 'Feature' : 'Unfeature'} post:`, postId);
                const response = await $.ajax({
                    url: `/accounts/toggle-featured-status/${postId}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        isFeatured: shouldFeature,
                        currentPage: currentPage
                    })
                });

                if (response.success) {
                    $('#posts-table-body').html(response.html); // Update table content
                    showSuccessNotification(`Post ${shouldFeature ? 'featured' : 'unfeatured'} successfully.`);
                } else {
                    showErrorNotification(`There was a problem ${shouldFeature ? 'featuring' : 'unfeaturing'} your post.`);
                }
            } catch (error) {
                showErrorNotification(`Error ${shouldFeature ? 'featuring' : 'unfeaturing'} post: ${error.responseText || error.message}`);
            }
        }

        async function handlePostAction(postId, action, currentPage, inputValue = null) {
            try {
                console.log(`Action: ${action} post:`, postId);

                const requestData = {
                    action: action,
                    currentPage: currentPage
                };

                if (action === 'reject' && inputValue) {
                    requestData.reason = inputValue;
                }
                
                const response = await $.ajax({
                    url: `/accounts/${action}-post/${postId}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(requestData)
                });

                if (response.success) {
                    $('#posts-table-body').html(response.html);
                    showSuccessNotification(`Post ${action}ed successfully.`);
                } else {
                    showErrorNotification(`There was a problem ${action}ing your post.`);
                }
            } catch (error) {
                showErrorNotification(`Error ${action}ing post: ${error.responseText || error.message}`);
            }
        }
    </script>
}

<input type="hidden" id="current-page" value="@Model.Posts.MetaData.CurrentPage" />
<div class="container single-content">
    <div class="entry-header entry-header-style-1 mb-50 pt-50 text-center">
        <h1 class="entry-title mb-20 font-weight-900">
            Manage posts
        </h1>
    </div>
    <div class="row mb-3">
        <div class="col-md-12 text-right-custom">
            <button class="btn btn-primary btn-block" onclick="location.href='@Url.Action("CreatePost", "Accounts")'">
                <i class="fa fa-edit"></i> Create new post
            </button>
        </div>
    </div>

    <div class="row mb-3 align-items-center">
        <div class="col-md-2">
            <select id="status-filter" class="custom-dropdown form-control">
                <option value="" selected>All</option>
                <option value="0">Draft</option>
                <option value="1">Waiting approval</option>
                <option value="2">Rejected</option>
                <option value="3">Published</option>
            </select>
        </div>
        <div class="col-md-3">
            <input type="text" class="form-control search-input" id="keyword-filter" placeholder="Search..." />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="table-wrap">
                <table class="table table-responsive-xl">
                    <thead>
                    <tr>
                        <th>&nbsp;</th>
                        @if (isAdmin)
                        {
                            <th style="min-width: 50px;">Pinned</th>
                            <th style="min-width: 50px;">Featured</th>
                        }
                        <th style="min-width: 100px;">Status</th>
                        <th style="min-width: 150px;">Category</th>
                        <th style="min-width: 300px;">Title</th>
                        <th style="min-width: 120px;">Created date</th>
                        <th style="min-width: 80px;">Views</th>
                        <th style="min-width: 80px;">Comments</th>
                        <th style="min-width: 80px;">Likes</th>
                        <th style="min-width: 150px;">Published date</th>
                        <th>&nbsp;</th>
                    </tr>
                    </thead>
                    <tbody id="posts-table-body">
                    @await Html.PartialAsync("Partials/Accounts/_PostsByCurrentUserTablePartial", Model)
                    </tbody>
                    <tfoot>
                    <tr>
                        <td colspan="6">
                            <div class="pagination-area mb-30" id="pagination-area">
                                @await Component.InvokeAsync("Pager", posts.MetaData)
                            </div>
                        </td>
                    </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Post Activity Logs Modal -->
<div class="modal fade" id="activity-log-modal" tabindex="-1" aria-labelledby="activity-log-label" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="activity-log-label">Post Activity Logs</h5>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Nội dung modal sẽ được cập nhật qua AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>