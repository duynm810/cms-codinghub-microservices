@model ManagePostsViewModel
@{
    var posts = Model.Posts;
    var user = User;
    var isAdmin = ClaimsPrincipalExtensions.IsInRole(user, UserRolesConsts.Administrator);
}

@section Scripts {
    <script>
        function updatePost(button) {
            let slug = button.getAttribute('data-slug');
            let urlTemplate = button.getAttribute('data-url');
            window.location.href = urlTemplate.replace('__slug__', encodeURIComponent(slug));
        }

        function deletePost(button) {
            const postId = button.getAttribute('data-id');
            let deleteUrl = `@Url.Action("DeletePost", "Accounts")/${postId}`;

            showConfirmAlert(
                'Are you sure?',
                "You won't be able to revert this!",
                'Yes, delete it!',
                'Cancel',
                () => {
                    $.ajax({
                        url: deleteUrl,
                        type: 'DELETE',
                        contentType: 'application/json',
                        success: function(data) {
                            if (data.success) {
                                showSuccessNotification('Your post has been deleted.');
                                if (data.html) {
                                    $('#posts-table-body').html(data.html); // Update table content
                                }
                            } else {
                                showErrorNotification('There was a problem deleting your post.');
                            }
                        },
                        error: function() {
                            showErrorNotification('There was a problem deleting your post.');
                        }
                    });
                }
            );
        }

        function confirmPin(button, shouldPin) {
            const action = shouldPin ? 'pin' : 'unpin';
            const message = shouldPin ? 'pin this post' : 'unpin this post';

            showConfirmAlert(
                `Confirm ${action}`,
                `Are you sure you want to ${message}?`,
                `Yes, ${action} it`,
                'Cancel',
                () => {
                    const postId = button.getAttribute('data-id');
                    pinPost(postId, shouldPin);
                }
            );
        }

        function confirmFeature(button, shouldFeature) {
            const action = shouldFeature ? 'feature' : 'unfeature';
            const message = shouldFeature ? 'feature this post' : 'unfeature this post';

            showConfirmAlert(
                `Confirm ${action}`,
                `Are you sure you want to ${message}?`,
                `Yes, ${action} it`,
                'Cancel',
                () => {
                    const postId = button.getAttribute('data-id');
                    featurePost(postId, shouldFeature);
                }
            );
        }

        async function pinPost(postId, shouldPin) {
            try {
                console.log(`${shouldPin ? 'Pin' : 'Unpin'} post:`, postId);
                const response = await $.ajax({
                    url: `/accounts/toggle-pin-status/${postId}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        isPinned: shouldPin
                    })
                });

                if (response.success) {
                    $('#posts-table-body').html(response.html); // Update table content
                    showSuccessNotification(`Post ${shouldPin ? 'pinned' : 'unpinned'} successfully.`);
                } else {
                    showErrorNotification(`There was a problem ${shouldPin ? 'pinning' : 'unpinning'} your post.`);
                }
            } catch (error) {
                showErrorNotification(`Error ${shouldPin ? 'pinning' : 'unpinning'} post: ${error.responseText || error.message}`);
            }
        }

        async function featurePost(postId, shouldFeature) {
            try {
                console.log(`${shouldFeature ? 'Feature' : 'Unfeature'} post:`, postId);
                const response = await $.ajax({
                    url: `/accounts/toggle-featured-status/${postId}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        isFeatured: shouldFeature
                    })
                });

                if (response.success) {
                    $('#posts-table-body').html(response.html); // Update table content
                    showSuccessNotification(`Post ${shouldFeature ? 'featured' : 'unfeatured'} successfully.`);
                } else {
                    showErrorNotification(`There was a problem ${shouldFeature ? 'featuring' : 'unfeaturing'} your post.`);
                }
            } catch (error) {
                showErrorNotification(`Error ${shouldFeature ? 'featuring' : 'unfeaturing'} post: ${error.responseText || error.message}`);
            }
        }

    </script>
}

<div class="container single-content">
    <div class="entry-header entry-header-style-1 mb-50 pt-50 text-center">
        <h1 class="entry-title mb-20 font-weight-900">
            Manage posts
        </h1>
    </div>
    <div class="row mb-3">
        <div class="col-md-12 text-right-custom">
            <button class="btn btn-primary btn-block" onclick="location.href='@Url.Action("CreatePost", "Accounts")'">
                <i class="fa fa-edit"></i> Create new post
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="table-wrap">
                <table class="table table-responsive-xl">
                    <thead>
                    <tr>
                        <th>&nbsp;</th>
                        @if (isAdmin)
                        {
                            <th style="min-width: 50px;">Pinned</th>
                            <th style="min-width: 50px;">Featured</th>
                        }
                        <th style="min-width: 100px;">Status</th>
                        <th style="min-width: 150px;">Category</th>
                        <th style="min-width: 300px;">Title</th>
                        <th style="min-width: 120px;">Created date</th>
                        <th style="min-width: 80px;">Views</th>
                        <th style="min-width: 80px;">Comments</th>
                        <th style="min-width: 80px;">Likes</th>
                        <th style="min-width: 150px;">Published date</th>
                        <th>&nbsp;</th>
                    </tr>
                    </thead>
                    <tbody id="posts-table-body">
                    @await Html.PartialAsync("Partials/Accounts/_PostsByCurrentUserTablePartial", Model)
                    </tbody>
                    <tfoot>
                    <tr>
                        <td colspan="6">
                            <div class="pagination-area mb-30">
                                @await Component.InvokeAsync("Pager", posts.MetaData)
                            </div>
                        </td>
                    </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>