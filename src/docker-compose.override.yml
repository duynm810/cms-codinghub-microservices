#services:
services:
  ##database section
  #categorydb: mysql
  categorydb:
    container_name: categorydb
    environment:
      MYSQL_ROOT_PASSWORD: "Passw0rd!"
      MYSQL_DATABASE: "category_service_db"
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"
  
  #postdb: postgresql
  postdb:
    container_name: postdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=post_service_db
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  #seriesdb: sqlserver
  seriesdb:
    container_name: seriesdb
    environment:
      SA_PASSWORD: "Passw0rd!"
      ACCEPT_EULA: "Y"
    volumes:
      - sqlserver_data:/var/opt/mssql
    restart: always
    ports:
      - "1435:1433"
  
  #postinseriesdb: redis
  postinseriesdb:
    container_name: postinseriesdb
    restart: always
    ports:
      - "6379:6379"
  
  #hangfiredb: mongo
  hangfiredb:
    container_name: hangfiredb
    ports:
      - "27018:27017"
    volumes:
      - hangfire_mongo_data:/data/db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: 'admin'
      MONGO_INITDB_ROOT_PASSWORD: 'admin'
      
  #identitydb: sqlserver
  identitydb:
    container_name: identitydb
    environment:
      SA_PASSWORD: "Passw0rd!"
      ACCEPT_EULA: "Y"
    volumes:
      - identity_sqlserver_data:/var/opt/mssql
    restart: always
    ports:
      - "1436:1433"
  
  ##infrastructure section
  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    hostname: rabbitmq
  
  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8082:8000"
      - "9002:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  
  elasticsearch:
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - node.name=es01
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_SERVICE_TOKEN=AAEAAWVsYXN0aWMva2liYW5hL2tpYmFuYV90b2tlbjpXZFF0Wm5tM1JyQ1hoYUNRb1ZTdXlB
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
  
  ##microservices api sections
  apigw.ocelot:
    container_name: apigw.ocelot
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - category.api
      - post.api
      - series.api
      - post-in-series.api
      - hangfire.api
    ports:
      - "6001:80"
    restart: always
    
  identity.api:
    container_name: identity.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - identitydb
    ports:
      - "6002:80"
    restart: always
  
  category.api:
    container_name: category.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - categorydb
    ports:
      - "6003:80"
    restart: always
  
  category.grpc:
    container_name: category.grpc
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - categorydb
    ports:
      - "6004:80"
    restart: always
    
  post.api:
    container_name: post.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - postdb
    ports:
      - "6005:80"
    restart: always
  
  post.grpc:
    container_name: post.grpc
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - postdb
    ports:
      - "6006:80"
    restart: always
  
  series.api:
    container_name: series.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - seriesdb
    ports:
      - "6007:80"
    restart: always
  
  series.grpc:
    container_name: series.grpc
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - seriesdb
    ports:
      - "6008:80"
    restart: always
  
  post-in-series.api:
    container_name: post-in-series.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - postinseriesdb
    ports:
      - "6009:80"
    restart: always
  
  hangfire.api:
    container_name: hangfire.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - hangfiredb
    ports:
      - "6015:80"
    restart: always
       
  media.api:
    container_name: media.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    ports:
      - "6016:80"
    restart: always
    volumes:
      - ./wwwroot:/app/wwwroot
  
  healthcheck:
    container_name: healthcheck
    environment:
      - ASPNETCORE_ENVIRONMENT=Local
      - ASPNETCORE_URLS=http://+:80
    ports:
      - "6020:80"